substitutions:
  disp_name: Energy Meter  # Change the disp_name to something you want
  update_time: 10s  # Interval of how often the power is updated
  devicename: energymeter  #The device's name, MUST BE LOWERCASE!!!!
  
esphome:
  name: $devicename
esp32:
  board: nodemcu-32s

wifi:
  ssid: !secret wifi_ssid  #either place in your "Secrets" file or put the desired information
  password: !secret wifi_password #either place in your "Secrets" file or put the desired information
  manual_ip:  # Static IP address information.  Recomended to be set for your devices but can be commented out (#) to use DHCP.
    static_ip: #!secret ip_address_energymeter
    gateway: #!secret ip_gateway
    subnet: #!secret ip_subnet  Generally 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${disp_name} Hotspot"
    password: !secret ap_password #either place in your "Secrets" file or put the desired information
  reboot_timeout: 0s #Prevents the ESP from rebooting at odd times

captive_portal:

#mqtt:  # Comment out this section if using API with (#) 
#  broker: !secret mqtt_broker
#  username: !secret mqtt_user
#  password: !secret mqtt_pass

api: #now requried by ESPhome
  encryption:  
    key: !secret api_key  #insert an encryption key or place it in your "Secrets" file

ota:  #now requried by ESPhome
  - platform: esphome
    password: !secret ota_password #insert an Over The Air update password or place it in your "Secrets" file

logger:

web_server:  
  port: 80

time:  #Pull current time information SNTP must be used if API is disabled above.  Recommend using API if your devices will not have internet access!!
#  - platform: sntp  #Use NTP time protocol.  This will automatically pull time information on bootup from default NTP servers.
#    id: sntp_time
    
  - platform: homeassistant  #Use current HomeAssistant time.  This will automatically pull time from HomeAssistant on a regular basis though the API.
    id: homeassistant_time

spi:
  clk_pin: 18
  miso_pin: 19
  mosi_pin: 23

sensor:
  - platform: wifi_signal
    name: ${disp_name} WiFi Signal
    filters:
    - sliding_window_moving_average:
        window_size: 15
        send_every: 15
  - platform: atm90e32
    cs_pin: 5
    # Note: if you are using an expansion board, refer to the top physical jumper pins to determine the correct cs_pin numbers.
    # Replicate the platform: atm90e3 section, change the cs_pin and finally update the CT#s for your expansion boaard. 
    phase_a:
      voltage:
        name: ${disp_name} Volts A
        id: ic1Volts
        accuracy_decimals: 1
#        filters:
#          - multiply: 2.0
      current:
        name: ${disp_name} CT1 Amps
        id: ct1Amps
      gain_voltage: 42620
# Voltage using a 9VAC power transformer
# Note: If you can not get the voltage correct with the highest gain of 65535, uncomment the 2.0 multiply filter above and lower the gain as needed
      gain_ct: 15420
# Current calibration using a 50A/1V SCT-013-050
    phase_b:
      current:
        name: ${disp_name} CT2 Amps
        id: ct2Amps
      gain_ct: 32498
# Current calibration using a 100A/50ma SCT-013-000
    phase_c:
      current:
        name: ${disp_name} CT3 Amps
        id: ct3Amps
      gain_ct: 32498
# Current calibration using a 100A/50ma SCT-013-000
    frequency:
      name: ${disp_name} Freq A
    line_frequency: 60Hz
    gain_pga: 1X
    update_interval: ${update_time}
  - platform: atm90e32
    cs_pin: 4
    phase_a:
      voltage:
        name: ${disp_name} Volts B
        id: ic2Volts
        accuracy_decimals: 1
      current:
        name: ${disp_name} CT4 Amps
        id: ct4Amps
      gain_voltage: 42620
      gain_ct: 32498
# Current calibration using a 100A/50ma SCT-013-000
    phase_b:
      current:
        name: ${disp_name} CT5 Amps
        id: ct5Amps
      gain_ct: 32498
# Current calibration using a 100A/50ma SCT-013-000      
    phase_c:
      current:
        name: ${disp_name} CT6 Amps
        id: ct6Amps
      gain_ct: 8650
# Current calibration using a 30A/1V SCT-013-030
    frequency:
      name: ${disp_name} Freq B
    line_frequency: 60Hz
    gain_pga: 1X
    update_interval: ${update_time}    
  - platform: template
    name: ${disp_name} CT1 Watts
    id: ct1Watts
    lambda: return id(ct1Amps).state * id(ic1Volts).state;
    accuracy_decimals: 0
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}         
  - platform: template
    name: ${disp_name} CT2 Watts
    id: ct2Watts
    lambda: return id(ct2Amps).state * id(ic1Volts).state;
    accuracy_decimals: 0
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}         
  - platform: template
    name: ${disp_name} CT3 Watts
    id: ct3Watts
    lambda: return id(ct3Amps).state * id(ic1Volts).state;
    accuracy_decimals: 0
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}         
  - platform: template
    name: ${disp_name} CT4 Watts
    id: ct4Watts
    lambda: return id(ct4Amps).state * id(ic2Volts).state;
    accuracy_decimals: 0
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}         
  - platform: template
    name: ${disp_name} CT5 Watts
    id: ct5Watts
    lambda: return id(ct5Amps).state * id(ic1Volts).state;
    accuracy_decimals: 0
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}         
  - platform: template
    name: ${disp_name} CT6 Watts
    id: ct6Watts
    lambda: return id(ct6Amps).state * id(ic1Volts).state;
    accuracy_decimals: 0
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}         
  - platform: template
    name: ${disp_name} Total Amps
    id: totalAmps
    lambda: return id(ct4Amps).state + id(ct5Amps).state;
    accuracy_decimals: 2
    unit_of_measurement: A
    icon: "mdi:flash"
    update_interval: ${update_time}         

  - platform: template
    name: ${disp_name} Total Watts
    id: totalWatts
    lambda: return id(totalAmps).state * id(ic2Volts).state;
    accuracy_decimals: 1
    unit_of_measurement: W
    icon: "mdi:flash-circle"
    update_interval: ${update_time}             

  - platform: total_daily_energy
    name: ${disp_name} Total kWh
    power_id: totalWatts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh
    

switch:  #Shows a "Toggle" button on the Web Page to restart the device.
  - platform: restart
    name: ${disp_name} Restart
